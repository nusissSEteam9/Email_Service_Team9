name: Build and Deploy

on:
  push:
    branches:
      - master

jobs:
  # Build job for compiling the application
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code from GitHub
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Cache Gradle dependencies
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 3: Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Step 4: Set up JDK 17 for building the project
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 5: Build the JAR file using Gradle
      - name: Build with Gradle
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://iss-practice-module.cjq2w0cwqb5h.ap-southeast-1.rds.amazonaws.com:3306/HEALTHYRECIPY
          SPRING_DATASOURCE_USERNAME: admin
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: ./gradlew clean build --no-daemon

  # Docker job for building and pushing Docker image
  docker-build:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Step 1: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 2: Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # Step 3: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 4: Build and push multi-architecture Docker image
      - name: Build and push Docker image to ECR
        run: |
          docker buildx build \
            --platform linux/arm64 \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest-EmailService \
            --push .